/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/tokyo_build.glb --output src/components/TokyoModel.tsx --typescript 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    立方體_1: THREE.Mesh
    立方體_2: THREE.Mesh
    立方體_3: THREE.Mesh
    立方體_4: THREE.Mesh
    立方體_5: THREE.Mesh
    立方體_6: THREE.Mesh
    立方體_7: THREE.Mesh
    立方體_8: THREE.Mesh
  }
  materials: {
    building: THREE.MeshStandardMaterial
    windowsill: THREE.MeshStandardMaterial
    wimdow_emission: THREE.MeshStandardMaterial
    gratdusk: THREE.MeshStandardMaterial
    ['gratdusk.001']: THREE.MeshStandardMaterial
    door: THREE.MeshStandardMaterial
    doorwood: THREE.MeshStandardMaterial
    材質: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function TokyoModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/tokyo_build.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, 1.603, 0]}>
        <mesh geometry={nodes.立方體_1.geometry} material={materials.building} />
        <mesh geometry={nodes.立方體_2.geometry} material={materials.windowsill} />
        <mesh geometry={nodes.立方體_3.geometry} material={materials.wimdow_emission} />
        <mesh geometry={nodes.立方體_4.geometry} material={materials.gratdusk} />
        <mesh geometry={nodes.立方體_5.geometry} material={materials['gratdusk.001']} />
        <mesh geometry={nodes.立方體_6.geometry} material={materials.door} />
        <mesh geometry={nodes.立方體_7.geometry} material={materials.doorwood} />
        <mesh geometry={nodes.立方體_8.geometry} material={materials.材質} />
      </group>
    </group>
  )
}

useGLTF.preload('/tokyo_build.glb')
